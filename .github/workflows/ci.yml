name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.9"
  POETRY_VERSION: "1.6.1"

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Run Black (Code formatting check)
        run: |
          poetry run black --check --diff prunarr/ tests/

      - name: Run isort (Import sorting check)
        run: |
          poetry run isort --check-only --diff prunarr/ tests/

      - name: Run flake8 (Linting)
        run: |
          poetry run flake8 prunarr/ tests/

      - name: Run mypy (Type checking)
        run: |
          poetry run mypy prunarr/

      - name: Run bandit (Security linting)
        run: |
          poetry run bandit -r prunarr/ -f json -o bandit-report.json
          poetry run bandit -r prunarr/

      - name: Upload bandit results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: bandit-results
          path: bandit-report.json

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Install project
        run: poetry install --no-interaction

      - name: Run tests with coverage
        run: |
          poetry run pytest \
            --cov=prunarr \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --cov-fail-under=80 \
            --junitxml=pytest-results.xml \
            -v

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            pytest-results.xml
            htmlcov/
            .coverage

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.9'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: true

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Test CLI installation
        run: |
          poetry run pip install -e .
          poetry run prunarr --help

      - name: Test configuration validation
        run: |
          # Test that CLI properly validates configuration
          poetry run prunarr --config /nonexistent.yaml --help || true

      - name: Run integration tests
        run: |
          poetry run pytest tests/ -m integration -v

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Set up Python for safety check
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Check for known security vulnerabilities
        run: |
          poetry install --no-interaction
          poetry run safety check --json --output safety-report.json || true
          poetry run safety check

      - name: Upload safety results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: safety-results
          path: safety-report.json

  build:
    name: Build & Package
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Build package
        run: |
          poetry build

      - name: Check package
        run: |
          poetry run pip install twine
          poetry run twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: |
          poetry install --no-interaction

      - name: Check README links
        run: |
          # Install markdown-link-check
          npm install -g markdown-link-check
          markdown-link-check README.md --config .github/markdown-link-check.json || true

      - name: Validate documentation
        run: |
          # Check that all modules have docstrings
          poetry run python -c "
          import ast
          import sys
          from pathlib import Path

          def check_docstrings(file_path):
              with open(file_path, 'r') as f:
                  tree = ast.parse(f.read())

              for node in ast.walk(tree):
                  if isinstance(node, (ast.FunctionDef, ast.ClassDef, ast.AsyncFunctionDef)):
                      if not ast.get_docstring(node):
                          print(f'Missing docstring: {file_path}:{node.lineno} {node.name}')
                          return False
              return True

          all_good = True
          for py_file in Path('prunarr').rglob('*.py'):
              if not check_docstrings(py_file):
                  all_good = False

          if not all_good:
              sys.exit(1)
          "

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Install dependencies
        run: |
          poetry install --no-interaction

      - name: Run performance benchmarks
        run: |
          # Basic performance tests
          poetry run python -c "
          import time
          import tempfile
          import yaml
          from prunarr.config import load_settings

          # Test config loading performance
          config_data = {
              'radarr_api_key': 'test',
              'radarr_url': 'http://localhost:7878',
              'sonarr_api_key': 'test',
              'sonarr_url': 'http://localhost:8989',
              'tautulli_api_key': 'test',
              'tautulli_url': 'http://localhost:8181'
          }

          with tempfile.NamedTemporaryFile(mode='w', suffix='.yaml', delete=False) as f:
              yaml.dump(config_data, f)
              temp_path = f.name

          start_time = time.time()
          for _ in range(100):
              settings = load_settings(temp_path)
          end_time = time.time()

          avg_time = (end_time - start_time) / 100
          print(f'Average config load time: {avg_time:.4f}s')

          if avg_time > 0.1:  # Fail if too slow
              raise Exception(f'Config loading too slow: {avg_time:.4f}s')
          "

  compatibility:
    name: Compatibility Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.12"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        run: poetry install --no-interaction

      - name: Test basic functionality
        run: |
          poetry run prunarr --help
          poetry run python -c "from prunarr.config import Settings; print('Import successful')"

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [lint, test, integration-test, security, build, docs, performance, compatibility]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: ${{ env.POETRY_VERSION }}

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Create Release
        if: github.event_name == 'push' && contains(github.event.head_commit.message, '[release]')
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          tag_name: v${{ steps.version.outputs.version }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notification
    runs-on: ubuntu-latest
    needs: [lint, test, integration-test, security, build, docs, performance, compatibility]
    if: always()
    steps:
      - name: Notify on success
        if: ${{ needs.lint.result == 'success' && needs.test.result == 'success' && needs.integration-test.result == 'success' }}
        run: |
          echo "✅ All checks passed successfully!"

      - name: Notify on failure
        if: ${{ needs.lint.result == 'failure' || needs.test.result == 'failure' || needs.integration-test.result == 'failure' }}
        run: |
          echo "❌ Some checks failed!"
          exit 1